// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using datafromexceltryingon3tables;

#nullable disable

namespace datafromexceltryingon3tables.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230502145250_madeCorrectionInPKname")]
    partial class madeCorrectionInPKname
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("datafromexceltryingon3tables.Models.Aging", b =>
                {
                    b.Property<int>("AgingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgingId"));

                    b.Property<string>("GrandTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotDue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnappliedReceiptsReconcialiationPending")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_030Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_120180Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_180Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_3060Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_6090Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_90120Days")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgingId");

                    b.ToTable("Agings");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.ArPOC", b =>
                {
                    b.Property<int>("ArPOCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArPOCId"));

                    b.Property<string>("PocName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArPOCId");

                    b.ToTable("ArPocs");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.Band", b =>
                {
                    b.Property<int>("BandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BandId"));

                    b.Property<string>("BandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BandId");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.BusinessUnit", b =>
                {
                    b.Property<int>("BusinessUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessUnitId"));

                    b.Property<string>("BuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newBuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessUnitId");

                    b.ToTable("BusinessUnits");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.CompanyCategory", b =>
                {
                    b.Property<int>("CompanyCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyCategoryId"));

                    b.Property<string>("CompanyCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyCategoryId");

                    b.ToTable("companyCategories");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.MasterTable", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AgingId")
                        .HasColumnType("int");

                    b.Property<int>("ArPOCId")
                        .HasColumnType("int");

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessUnitId")
                        .HasColumnType("int");

                    b.Property<int>("BussinessUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyCategoryId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AgingId");

                    b.HasIndex("ArPOCId");

                    b.HasIndex("BandId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyCategoryId");

                    b.ToTable("MasterTables");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.MasterTable", b =>
                {
                    b.HasOne("datafromexceltryingon3tables.Models.Aging", "aging")
                        .WithMany("MasterTables")
                        .HasForeignKey("AgingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("datafromexceltryingon3tables.Models.ArPOC", "ArPoc")
                        .WithMany("MasterTables")
                        .HasForeignKey("ArPOCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("datafromexceltryingon3tables.Models.Band", "band")
                        .WithMany("MasterTables")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("datafromexceltryingon3tables.Models.BusinessUnit", "businessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("datafromexceltryingon3tables.Models.Client", "client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("datafromexceltryingon3tables.Models.CompanyCategory", "companyCategory")
                        .WithMany()
                        .HasForeignKey("CompanyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArPoc");

                    b.Navigation("aging");

                    b.Navigation("band");

                    b.Navigation("businessUnit");

                    b.Navigation("client");

                    b.Navigation("companyCategory");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.Aging", b =>
                {
                    b.Navigation("MasterTables");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.ArPOC", b =>
                {
                    b.Navigation("MasterTables");
                });

            modelBuilder.Entity("datafromexceltryingon3tables.Models.Band", b =>
                {
                    b.Navigation("MasterTables");
                });
#pragma warning restore 612, 618
        }
    }
}
